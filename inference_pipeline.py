# -*- coding: utf-8 -*-
"""inference_pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BErmOhpsZQi8xqYSMojQhkKCvOegkqs0
"""

import os
import cv2
import numpy as np
from PIL import Image
from ultralytics import YOLO

os.makedirs("outputs/cropped_vehicles", exist_ok=True)
os.makedirs("outputs/cropped_plates", exist_ok=True)

def preprocess_image(image_path):
    image = Image.open(image_path).convert('RGB')
    image_np = np.array(image)

    hsv = cv2.cvtColor(image_np, cv2.COLOR_RGB2HSV)
    gray = cv2.cvtColor(image_np, cv2.COLOR_RGB2GRAY)
    gray_norm = (gray - gray.min()) / (gray.max() - gray.min())
    gray_norm_3ch = np.stack([gray_norm] * 3, axis=-1)
    processed_image = (gray_norm_3ch * 255).astype(np.uint8)

    return image, processed_image

def detect_vehicles(image_path, model):
    results = model(image_path)[0]
    target_classes = [2, 3, 5, 7]  # car, motorcycle, bus, truck (COCO)
    boxes = [
        box.xyxy[0].cpu().numpy().astype(int)
        for box in results.boxes
        if int(box.cls) in target_classes
    ]
    return boxes

def detect_plates(image_np, model):
    results = model(image_np)[0]
    boxes = [box.xyxy[0].cpu().numpy().astype(int) for box in results.boxes]
    return boxes

def crop_and_save(img, boxes, prefix, output_dir):
    cropped = []
    for i, (x1, y1, x2, y2) in enumerate(boxes):
        crop = img.crop((x1, y1, x2, y2))
        path = os.path.join(output_dir, f"{prefix}_{i+1}.jpg")
        crop.save(path)
        cropped.append((crop, path))
    return cropped

def run_pipeline(image_path, plate_model_path="yolov8_plate_detect/model_weights/CDot_Lavanya_NP.pt"):
    vehicle_model = YOLO("yolov8n.pt")
    plate_model = YOLO(plate_model_path)

    original_img, processed_img = preprocess_image(image_path)

    vehicle_boxes = detect_vehicles(image_path, vehicle_model)
    print(f"Detected {len(vehicle_boxes)} vehicle(s).")

    vehicle_crops = crop_and_save(original_img, vehicle_boxes, "vehicle", "outputs/cropped_vehicles")

    for i, (vehicle_crop, _) in enumerate(vehicle_crops):
        vehicle_np = np.array(vehicle_crop)
        plate_boxes = detect_plates(vehicle_np, plate_model)

        if not plate_boxes:
            print(f"Vehicle {i+1}: No plates found.")
        else:
            crop_and_save(vehicle_crop, plate_boxes, f"plate_{i+1}", "outputs/cropped_plates")
            print(f"Vehicle {i+1}: Saved {len(plate_boxes)} plate(s).")

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Indian vehicle and plate detection using YOLOv8")
    parser.add_argument("--image", type=str, required=True, help="Path to input image")
    parser.add_argument("--plate_model", type=str, default="yolov8_plate_detect/model_weights/CDot_Lavanya_NP.pt", help="Path to plate detection model")
    args = parser.parse_args()

    run_pipeline(args.image, args.plate_model)